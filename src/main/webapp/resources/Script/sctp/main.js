/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//

var versione = "2.1.3.1";
function load()
{
    var os = navigator.platform.indexOf("Win") != -1 ? "Windows" : navigator.platform.indexOf("Mac") != -1 ?  "Mac" : "X11"; 
    $(function(){
        $( "#login-dialog" ).dialog({
			autoOpen: false,
			height: 200,
			width: 350,
			modal: true,
            close: function() {
				$("#pin2").val( "" ).removeClass( "ui-state-error" );
                $("#pin-error").hide();
			}
		});
        
        $("#change-pin-dialog" ).dialog({
			autoOpen: false,
			height: 280,
			width: 370,
			modal: true,
            close: function() {
				$("#change-pin-dialog input").val("").removeClass( "ui-state-error" );
                $("#change-pin-error").text("");
			}
		});
         if(os == "Windows"){
            $("#p11Path").val("C:\\Windows\\System32\\");
            $("#p11Name").val("bit4xpki");
            $("#p11Param").val("");
        }
        if(typeof localStorage === "object"){
            $("#p11Path").val(localStorage.getItem('p11Path') || "");
            $("#p11Name").val(localStorage.getItem('p11Name') || "");
            $("#p11Param").val(localStorage.getItem('p11Param') || "");
        }
        $("#tabs").tabs();
        setTimeout(function(){
            if(!detectPlugin() ){
                //alert("SCTP plugin is either not installed or an old version. You will now be redirected to the page where you can find the latest version.");
                //$("#dowload-section").click();
          	 }
			if(plugin())
	        	$("#plugin-version").text("v. "+plugin().version);    
	       },1000);
    
    });
    $("#updateSlots").click(function(){
        fillMenu();
    });
    
    $("#slotSelector").change(function(){
        $(":[data-appset]").each(function(){$(this).empty();$(this).val("");});
    });

    $("#refreshPluginButton").click(function(){
        plugin().refreshPlugin();
        $(":[data-appset]").each(function(){$(this).empty();$(this).val("");});
        $("#slotSelector").val("");
        setTimeout(function(){fillMenu()}, 1500);
    });
     

    $("#serialUpdateButton").click(function(){
        fillSerial();
    });
    $("#loginButton").click(function(){
        fillSerial();
    });
    $(":[data-func='fillPubKey']").click(function(){
        fillPubKeys();
    });

    $(":[data-func='fillPrivKey']").click(function(){
        fillPrivKeys();
    });
    $("#certsUpdateButton").click(function(){
        fillCerts();
    });
    
    $("#signCertsUpdateButton").click(function(){
        fillSignCerts();
    });
     
    $("#destroyKeyButton").click(function(){
        var slot = getSlot();
        var label =  $("#keySelector option:selected").text().split(":")[1];
        var message = plugin().destroyKeyPair(slot,label);
        if(error()) return;
        alert(message);
         $(":[data-appset]").each(function(){$(this).empty();$(this).val("");});

    });
    $("#destroyAllCardButton").click(function(){
        var slot = getSlot();
        var message = plugin().destroyAllObjects(slot);
        if(error()) return;
        alert(message);
        $(":[data-appset]").each(function(){$(this).empty();$(this).val("");});
    });
    
    $("#changePinButton").click(function(){
        changePin();
    });
    $("#resetPinButton").click(function(){
        resetPin();
    });
    
    $("#signMessageButton").click(function(){
        signText();
    });
     $("#signDataButton").click(function(){
        signData();
    });
    $("#getCertButton").click(function(){
        getCert();
    });

    $("#generateP10Button").click(function(){
        generatePkcs10();
    });
    $("#installCertChainButton").click(function(){
        installCertChain();
    });
    $("#installCertButton").click(function(){
        installCertificate();
    });
    $(":[data-func='exportPubKey']").click(function(){
        exportKey();
    });

    $("#inportKeyButton").click(function(){
       inportKey(); 
    });

    $("#generateKeyPairButton").click(function(){
       generateKeyPair(); 
    });
    
    $("#wrapKeyButton").click(function(){
       wrapKey(); 
    });

    $("#unwrapKeyButton").click(function(){
       unwrapKey(); 
    });
    
    $("#addEmulatorButton").click(function(){
        plugin().addEmulator($("#addEmulatorLabel").val());
         $("#p11Path").val("C:\\Program Files\\ERACOM\\Cprov Runtime\\");
         $("#p11Name").val("cryptoki");

    });

    $("input[data-validate-against]").each(function(){
        $(this).keyup(function(){
            var pin1 = $(this).val(), pin2 = $($(this).attr("data-validate-against")).val();
            if(pin1 != pin2){
                $($(this).attr("data-validate-err-msg")).show();
                $(this).addClass( "ui-state-error" );
                return;
            }else{
                $(this).removeClass( "ui-state-error" );
                $($(this).attr("data-validate-against")).removeClass( "ui-state-error" );
                $($(this).attr("data-validate-err-msg")).hide();
            }
        });
    });
    
    setTimeout(function(){fillMenu()}, 1500);
}

function plugin(){
  return document.getElementById('plugin0');
}

function detectPlugin() {

	return (plugin() != null && plugin().version != undefined && plugin().version==versione);
}

function logIn(){
    //var pin = prompt("Inserisci pin");
    var pin = window.showModalDialog('showModalDialogBox.html', a, "dialogwidth: 450; dialogheight: 300; resizable: yes");  
    alert(pin);
    var rv = plugin().cardLogIn(getSlot(),pin);
    
    return rv;
    
    //$("#login-dialog").dialog("open");
}

function changePin(){
     $("#labelOldPin").text("Old Pin");
    initialize(function(){
        $("#change-pin-dialog" ).dialog("option", "buttons", [
            {
                text: "Change PIN",
                click: function() { 
                    if($("#newPin").val() != $("#newPinC").val()){
                        return;
                    }
                    var rv = plugin().cardChangePin(getSlot(),$("#oldPin").val(),$("#newPin").val());
                    if(error()) {
                        return;
                    }
                    $( this ).dialog( "close" );
                    alert("PIN changed successfully!");
                    

				}
            },
            {
                text : "Cancel",
                click: function() {
					$( this ).dialog( "close" );
                }
            }
        ]).dialog("open");

    });

}
function resetPin(){
    var lib = $("#p11Name").val().split(".")[0] + "|" + $("#p11Path").val() +"|"+$("#p11Param").val();
    plugin().setP11Lib(getSlot(),lib);
    $("#labelOldPin").text("PUK");
    $("#change-pin-dialog" ).dialog("option", "buttons", [
        {
            text: "Unblock PIN",
            click: function() { 
                if($("#newPin").val() != $("#newPinC").val()){
                    return;
                }
                var rv = plugin().cardResetPin(getSlot(),$("#oldPin").val(),$("#newPin").val());
                if(error()) {
                    return;
                }
                $( this ).dialog( "close" );
                alert("PIN changed successfully!");
                

            }
        },
        {
            text : "Cancel",
            click: function() {
                $( this ).dialog( "close" );
            }
        }
    ]).dialog("open");

    

}

function initialize(callback){
   // var lib = $("#p11Name").val().split(".")[0] + "|" + $("#p11Path").val() +"|"+$("#p11Param").val();
	var lib = "bit4xpki".split(".")[0] + "|" + "c:\\windows\\system32\\" +"|"+$("#p11Param").val();
    plugin().setP11Lib(getSlot(),lib);
    
    if(error()) return;
    
    if(typeof localStorage === "object"){
        localStorage.setItem('p11Path',$("#p11Path").val()|| "" );
        localStorage.setItem('p11Name',$("#p11Name").val() || "");
        localStorage.setItem('p11Param',$("#p11Param").val() || "");
    }

    if(!plugin().isCardLoggedIn(getSlot())){
        
        if(error()) return;
        $("#pin-error").hide();
        $("#login-dialog" ).dialog("option", "buttons", [
            {
                text: "Log In",
                click: function() { 
                    var that = this;
                    var rv = plugin().cardLogInAsync(getSlot(),$("#pin2").val(), function(p,rv){
                        if(rv== 0){
                            $( that ).dialog( "close" );
                            callback.call(that, rv);
                        }
                        if(error()) {
                            $( that ).dialog( "close" );
                            return;
                        }
                        $("#pin-error").text(rv);
                        $("#pin-error").show();
                    }, function(p,rv,message){
                        if(error()) {
                            $( that ).dialog( "close" );
                            return;
                        }
                    });
                    
				}
            },
            {
                text : "Cancel",
                click: function() {
					$( this ).dialog( "close" );
                }
            }
        ]).dialog("open");
        
    }else{
        callback.call(this,0);
    }
    
}

function selectKey(){

}

function getSlot(){
    return $("#slotSelector option:selected").text().split("=")[0];
}


function fillPubKeys(){
    var slot = getSlot();
    
    initialize(function(rv){
        var keys = plugin().getKeys(slot, false).split("|");
        if(error()) return;
        
        $(":[data-data='pubKeyList']").empty();
        
        $.each(keys,function(i, key){
            if(key == "") return;
    
            $(":[data-data='pubKeyList']").append(
                $("<option>").val(i).text(key)
            );
        });
    });
}


function fillPrivKeys(){
    var slot = getSlot();
    
    initialize(function(rv){
        var keys = plugin().getKeys(slot, true).split("|");
        if(error()) return;
        
        $(":[data-data='privKeyList']").empty();
        
        $.each(keys,function(i, key){
            if(key == "") return;
    
            $(":[data-data='privKeyList']").append(
                $("<option>").val(i).text(key)
            );
        });
    });
}

function fillCerts(){
    var slot = getSlot();
    
    initialize(function(rv){
        var certs = plugin().getCerts(slot).split("|");
        if(error()) return;
        
        $("#certSelector").empty();
        
        $.each(certs,function(i, cert){
            if(cert == "") return;
    
            $("#certSelector").append(
                $("<option>").val(i).text(cert)
            );
        });
    });
}
function fillSignCerts(){
    var slot = getSlot();
   
    initialize(function(rv){
        var certs = plugin().getKeysList(slot,255).split(";");
        if(error()) return;
        
        $("#signCertSelector").empty();
        
        $.each(certs,function(i, cert){
            if(cert == "") return;
    
            $("#signCertSelector").append(
                $("<option>").val(i).text(cert)
            );
        });
    });
}


function fillSerial(){
    var slot = getSlot();
    
    initialize(function(rv){
        var serial = plugin().getCardSerial(slot);
        
        if(error()) return;
        
        $("#cardSerialNumber").val(serial);
    });
}


function fillMenu(){
    $("#slotSelector").empty();
    var slots = plugin().getSlotAndAtrList(true,true).split(";");
    
    if(error()) return;
    
    $.each(slots,function(i, slot){
        if(slot == "") return;
    
        $("#slotSelector").append(
            $("<option>").val(i).text(slot)
        );
    });
}


function signText(){
    var slot = getSlot();
     
    if($("#signCertSelector option:selected").text() == "") {
        alert("No certificate selected to sign the text");
        return;
     }
    initialize(function(rv){
        
        var signCert = $("#signCertSelector option:selected").text().split("|")[0];
        
        if(!signCert) return;
        
        plugin().signMessageAsync(slot, signCert,  $("#signTextArea").val(), 
            function(plug, signedText){
                signedText="-----BEGIN PKCS7-----\n"
                +signedText.replace(/(\S{64})/g,"$1\n")
                +"\n-----END PKCS7-----";
                $("#signedTextArea").val(signedText);    
            }, function(p,rv,message){
                alert("Error:" +rv + " " + message);
            });
        
        if(error()) return;
        
       
    });
   
}
function signData(signDataBase64){
    var slot = getSlot();
     
    if($("#signCertSelector option:selected").text() == "") {
        alert("No certificate selected to sign the data");
        return;
     }
  // initialize(function(rv){
        
        var signCert = $("#signCertSelector option:selected").text().split("|")[0];
        
        if(!signCert) return;
        
       signedText = plugin().signData(slot, signCert, signDataBase64);
        

       if(error()) return;
        
       //$("#signedTextArea").val(signedText);
       return signedText;

   // });
   
}



function getCert(indice){
    var slot = getSlot();
    if(indice)
    	return plugin().getCertB64(slot, indice);
    if($("#signCertSelector option:selected").text() == "") {
        alert("No certificate selected to sign the data");
        return;
     }
       var signCert = $("#signCertSelector option:selected").text().split("|")[0];
        if(!signCert) return;
       signedText = plugin().getCertB64(slot, signCert);
       if(error()) return;
       return signedText;
}

function installCertChain(){
    var slot = getSlot();
     
    initialize(function(rv){
        var chain = $("#certificateTextArea").val();
        var lines = chain.split("\n");
        //remove "----BEGIN CERTIFICATE----" and "----END CERTIFICATE----" 
        for(var i=lines.length-1;i>=0;i--)
            if(lines[i].indexOf("-")!=-1)
                lines.splice(i,1);
                        
        chain = lines.join("");

        plugin().installCertChain(slot, chain);
        
		if(error()) return;
        
		fillCerts();

    });
   
}
function installCertificate(){
    var slot = getSlot();
     
    initialize(function(rv){
        var cert = $("#certificateTextArea").val();
        var lines = cert.split("\n");
        //remove "----BEGIN CERTIFICATE----" and "----END CERTIFICATE----" 
        for(var i=lines.length-1;i>=0;i--)
            if(lines[i].indexOf("-")!=-1)
                lines.splice(i,1);
                        
        cert = lines.join("");
                       
        plugin().InstallGeneratedCertificate(slot, cert);
        
        if(error()) return;
        
        fillCerts();

    });
   
}

function exportKey(){
    var slot = getSlot();
     
    initialize(function(rv){
        
        var label =  $("#expPubKeySelector option:selected").text().split(":")[1];              
        var expKey = plugin().exportKey(slot, label);
        
        if(error()) return;
        
         $("#exportedKeyTextArea").val(expKey);

    });
   
}

function inportKey(){
    var slot = getSlot();
     
    initialize(function(rv){
        var label="", token="";             
        label = $("#toInportKeyLabel").val();
        token = $("#toInportKeyToken").attr("checked") === undefined ? false : true;
        plugin().createKey(slot, $("#toInportKeyTextArea").val(), label, token);
        
        if(error()) return;

        alert("Key Inported.");
    });
   
}

function wrapKey(){
    var slot = getSlot();
     
    initialize(function(rv){
        var wrappingKeyLabel=$("#wrapPubKeySelector option:selected").text().split(":")[1]; 
        var toBeWrappedKeyLabel=$("#wrapPrivKeySelector option:selected").text().split(":")[1];      
        var wrappedKey = plugin().wrapKey(slot, wrappingKeyLabel, toBeWrappedKeyLabel).split("|");
        
        if(error()) return;
        
        $("#wrappedKeyDESTextArea").val(wrappedKey[0]);
        $("#wrappedKeyRSATextArea").val(wrappedKey[1]);

    });
   
}
function unwrapKey(){
    var slot = getSlot();
     
    initialize(function(rv){
        var unwrappingKeyLabel=$("#unwrapPrivKeySelector option:selected").text().split(":")[1]; 
     
        var wrappedKey = plugin().unwrapKey(slot, unwrappingKeyLabel, $("#toUnwrapKeyDESTextArea").val(),
                    $("#toUnwrapKeyRSATextArea").val(), $("#unwrappedKeyLabel").val());
        
        if(error()) return;
        
        alert("Key unwrapped and installed");
    });
   
}

function generateKeyPair(){
     var slot = getSlot();
     
    initialize(function(rv){
        var label="", extractable="", unwrap="";
        var keyLength = $("#generateKeyLength option:selected").text();             
        label = $("#generateKeyLabel").val();
        extractable = $("#generateKeyPrivExtractable").attr("checked") === undefined ? false : true;
        unwrap = $("#generateKeyPrivUnwrap").attr("checked") === undefined ? false : true;
        plugin().generateKeyPair(slot, parseInt(keyLength),label,extractable, unwrap);
        
        if(error()) return;

        alert("Keys Generated.");
    });
}

function generatePkcs10(){
    var readerName = getSlot();
    var atr ="";
    var dn =$("#dn").val(); 
    var altName = $("#altName").val();
    var keyUsage = $("#keyUsage").val();
    var keyLength = $("#keyLength option:selected").val();
    var digestAlg = $("#digetsAlg").val();
    plugin().generatePkcs10Async(readerName, dn, altName,keyUsage,parseInt(keyLength), digestAlg,
    function(p, pkcs10){
        pkcs10="-----BEGIN NEW CERTIFICATE REQUEST-----\n"
                +pkcs10.replace(/(\S{64})/g,"$1\n")
                +"\n-----END NEW CERTIFICATE REQUEST-----";
        $("#textarea").text(pkcs10);
        $("#textarea").val(pkcs10);
    }, function(p,code,msg){
        alert("Errore: " + msg.split("|")[5] + " code:"  + code);
    });
   
}

function error(){
    var errorCode = plugin().lastErrorValue ;
    if(errorCode!= 0){
		var errorMessage = "Generico Errore SmartCard";
        var retVal=[];
		switch (plugin().lastErrorValue){
			case 4000:
				retVal.sendError = true;		
				retVal.errorMessage = "Si \u00e8 verificato un errore generico durante l'operazione ("+errorCode+")";
				break;
			case 4001:
			    retVal.sendError = true;
				retVal.errorMessage = "Verificare la corretta installazione del plugin e riprovare ("+errorCode+")";
				break;
			case 4002:
				retVal.sendError = true;
				retVal.errorMessage = "L'operazione di Firma \u00e8 fallita ("+errorCode+")";
				break;
			case 4003:
				retVal.sendError = true;
				retVal.errorMessage = "L'operazione di Generazione delle chiavi \u00e8 fallita ("+errorCode+")";
				break;
			case 4004:
				retVal.sendError = true;
				retVal.errorMessage = "L'operazione di Installazione del Certificato \u00e8 fallita ("+errorCode+")";
				break;
			case 4005:
				retVal.sendError = true;
				retVal.errorMessage = "Propriet\u00e0 non disponibile ("+errorCode+")";
				break;
			case 4006:
			    retVal.sendError = true;
				retVal.errorMessage = "SmartCard non correttamente caricata ("+errorCode+")";
				break;
			case 4008:
			    retVal.sendError = true;
				retVal.errorMessage = "Procedura abbandonata dall'utente ("+errorCode+")";
				break;
			case 4500:
				retVal.sendError = true;
				retVal.errorMessage = "Driver della SmartCard non trovati ("+errorCode+")";
				break;
			case 4600: 
			case 4601: 
			case 4602: 
			case 4603: 
			case 4604: 
			case 4605:
			    retVal.sendError = true;
				retVal.errorMessage = "Driver della SmartCard non corretto ("+errorCode+")";
				break;
			case 4700:
			case 4701:
			case 4702:
			case 4703:
			case 4704:
			case 4705:
			case 4706:
				retVal.sendError = true;
				retVal.errorMessage = "Il driver della SmartCard ritorna Errore ("+errorCode+")";
				break;
			case 4800:
			case 4801:
			case 4802:
			case 4803:
			case 4804:
				retVal.sendError = true;
				retVal.errorMessage = "Il driver windows della SmartCard ritorna Errore ("+errorCode+")";
				break;
			case 4900:
				retVal.sendError = true;
				retVal.errorMessage = "Ci sono pi\u00f9 SmartCard inserite contemporaneamente ("+errorCode+")";
				break;
			case 5000:
				retVal.errorMessage = "Nessuna SmartCard disponibile per l'operazione ("+errorCode+")";
				break;	
		}
		alert("Errore: " + errorCode +"\n"+retVal.errorMessage+"\n"+ plugin().lastLoggingValue.split("|")[5] );
    }
    return (errorCode != 0);
}
